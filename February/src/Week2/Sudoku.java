package Week2;

/**
 * @Author Aurora_zh
 * @Date 2023/2/17 14:09
 */


/*
* 请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）

*
* 输入：board =
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
输出：true

* 输入：board =
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
输出：false
解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
* 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。

*
* */
public class Sudoku {
    public static boolean isValidSudoku(char[][] board) {
        //检查每行有没有重复 有重复返回false
        for (int i = 0; i < 9; i++) {
            if (isValid(board[i])) {
                return false;
            }
        }
        //检查每列有没有重复 有重复返回false
        char[] temp = new char[9];
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                temp[j] = board[j][i];
            }
            if (isValid(temp)) {
                return false;
            }
        }
        //检查九宫格有没有重复 有重复返回false
        char[] temp1 = new char[9];
        for (int i = 0; i < 9; i++) {
            //确定九宫格的起点坐标
            int start_row = 3*(i / 3);
            int start_col = (i % 3) * 3;
            //将九宫格放入temp1
            for (int j = 0; j < 3; j++) {

                System.arraycopy(board[start_row + j], start_col, temp1, 3 * j, 3);
            }
            //判读temp1是否有重复
            if (isValid(temp1)) {
                return false;
            }
        }
        //三个角度都没有重复
        return true;
    }

    // 判断有无重复   重复 返回true ;不重复返回 false
    public static boolean isValid(char[] row) {
        for (int i = 0; i < 9; i++) {
            if (row[i] != '.') {
                for (int j = i + 1; j < 9; j++) {
                    if (row[i] == row[j]) {
                        return true;
                    }
                }
            }

        }
        return false;
    }

    public static void main(String[] args) {
        char[][] board =
                {{'5', '3', '.', '.', '7', '.', '.', '.', '.'}
                        , {'6', '.', '.', '1', '9', '5', '.', '.', '.'}
                        , {'.', '9', '8', '.', '.', '.', '.', '6', '.'}
                        , {'8', '.', '.', '.', '6', '.', '.', '.', '3'}
                        , {'4', '.', '.', '8', '.', '3', '.', '.', '1'}
                        , {'7', '.', '.', '.', '2', '.', '.', '.', '6'}
                        , {'.', '6', '.', '.', '.', '.', '2', '8', '.'}
                        , {'.', '.', '.', '4', '1', '9', '.', '.', '5'}
                        , {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
                };
        System.out.println(isValidSudoku(board));

    }
}